// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects Project[]
  sessions Session[]
  accounts Account[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Project {
  id              String      @id @default(cuid())
  title           String
  description     String
  longDescription String?     @db.Text
  image           String
  technologies    String[]
  category        Category
  githubUrl       String?
  liveUrl         String?
  featured        Boolean     @default(false)
  published       Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  authorId        String
  author          User        @relation(fields: [authorId], references: [id])

  @@map("projects")
}

model Experience {
  id           String   @id @default(cuid())
  title        String
  company      String
  location     String
  startDate    DateTime
  endDate      DateTime?
  current      Boolean  @default(false)
  description  String   @db.Text
  technologies String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("experiences")
}

model Skill {
  id       String       @id @default(cuid())
  name     String       @unique
  level    Int          // 0-100
  category SkillCategory
  icon     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("skills")
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  read      Boolean  @default(false)
  replied   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contacts")
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String
  content     String   @db.Text
  image       String?
  tags        String[]
  published   Boolean  @default(false)
  featured    Boolean  @default(false)
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?

  @@map("blog_posts")
}

model Analytics {
  id        String   @id @default(cuid())
  event     String
  category  String
  label     String?
  value     Int?
  userAgent String?
  ip        String?
  createdAt DateTime @default(now())

  @@map("analytics")
}

enum Role {
  USER
  ADMIN
}

enum Category {
  FRONTEND
  BACKEND
  FULLSTACK
  MOBILE
  DESKTOP
}

enum SkillCategory {
  FRONTEND
  BACKEND
  DATABASE
  TOOLS
  OTHER
}

